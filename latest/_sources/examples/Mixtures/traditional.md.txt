# Modeling a Mixture in Traditional Representation

When modeling mixtures, we are often faced with a large set of ingredients to choose
from. A common way to formalize this type of selection problem is to assign each
ingredient its own numerical parameter representing the amount of the ingredient in
the mixture. A sum constraint imposed on all parameters then ensures that the total
amount of ingredients in the mix is always 100%. In addition, there could be other
constraints, for instance, to impose further restrictions on individual subgroups of
ingredients. In BayBE's language, we call this the *traditional mixture
representation*.

In this example, we demonstrate how to create a search space in this representation,
using a simple mixture of up to six components, which are divided into three
subgroups: solvents, bases and phase agents.

```{admonition} Slot-based Representation
:class: seealso
For an alternative way to describe mixtures, see our
[slot-based representation](/examples/Mixtures/slot_based.md).
```

## Imports


```python
import numpy as np
import pandas as pd
```


```python
from baybe.constraints import ContinuousLinearConstraint
from baybe.parameters import NumericalContinuousParameter
from baybe.recommenders import RandomRecommender
from baybe.searchspace import SearchSpace
```

## Parameter Setup

We start by creating lists containing our substance labels according to their
subgroups:


```python
g1 = ["Solvent1", "Solvent2"]
g2 = ["Base1", "Base2"]
g3 = ["PhaseAgent1", "PhaseAgent2"]
```

Next, we create continuous parameters describing the substance amounts for each group.
Here, the maximum amount for each substance depends on its group, i.e. we allow
adding more of a solvent compared to a base or a phase agent:


```python
p_g1_amounts = [
    NumericalContinuousParameter(name=f"{name}", bounds=(0, 80)) for name in g1
]
p_g2_amounts = [
    NumericalContinuousParameter(name=f"{name}", bounds=(0, 20)) for name in g2
]
p_g3_amounts = [
    NumericalContinuousParameter(name=f"{name}", bounds=(0, 5)) for name in g3
]
```

## Constraints Setup

Now, we set up our constraints. We start with the overall mixture constraint, ensuring
the total of all ingredients is 100%:


```python
c_total_sum = ContinuousLinearConstraint(
    parameters=g1 + g2 + g3,
    operator="=",
    coefficients=[1] * len(g1 + g2 + g3),
    rhs=100,
)
```

Additionally, we require bases make up at least 10% of the mixture:


```python
c_g2_min = ContinuousLinearConstraint(
    parameters=g2,
    operator=">=",
    coefficients=[1] * len(g2),
    rhs=10,
)
```

By contrast, phase agents should make up no more than 5%:


```python
c_g3_max = ContinuousLinearConstraint(
    parameters=g3,
    operator="<=",
    coefficients=[1] * len(g3),
    rhs=5,
)
```

## Search Space Creation

Having both parameter and constraint definitions at hand, we can create our
search space:


```python
searchspace = SearchSpace.from_product(
    parameters=[*p_g1_amounts, *p_g2_amounts, *p_g3_amounts],
    constraints=[c_total_sum, c_g2_min, c_g3_max],
)
```

## Verification of Constraints

To verify that the constraints imposed above are fulfilled, let us draw some
random points from the search space:


```python
recommendations = RandomRecommender().recommend(batch_size=10, searchspace=searchspace)
print(recommendations)
```

           Base1      Base2  PhaseAgent1  PhaseAgent2   Solvent1   Solvent2
    0   2.426035   9.845942     2.377308     0.783737  78.246658   6.320320
    1  19.064706   3.190682     3.060168     1.673532  14.113302  58.897611
    2   4.237280   8.375646     0.461763     0.404718  18.914846  67.605747
    3   9.551678   3.286546     2.212792     0.195157   4.889343  79.864484
    4  12.204787   2.218496     0.348659     2.892383  11.611781  70.723893
    5   4.046391   9.673985     2.586235     0.108707  64.034010  19.550672
    6  12.804581   8.968508     4.075986     0.038461  58.526488  15.585975
    7  14.818937  16.728762     1.469680     2.342993  13.169921  51.469707
    8  15.555935  14.511529     0.341634     3.500119  23.436239  42.654544
    9  12.201733  17.298856     2.192444     1.417555  66.080532   0.808880


Computing the respective row sums reveals the expected result:


```python
stats = pd.DataFrame(
    {
        "Total": recommendations.sum(axis=1),
        "Total_Bases": recommendations[g2].sum(axis=1),
        "Total_Phase_Agents": recommendations[g3].sum(axis=1),
    }
)
print(stats)
```

       Total  Total_Bases  Total_Phase_Agents
    0  100.0    12.271977            3.161045
    1  100.0    22.255388            4.733699
    2  100.0    12.612926            0.866481
    3  100.0    12.838225            2.407948
    4  100.0    14.423283            3.241043
    5  100.0    13.720376            2.694942
    6  100.0    21.773089            4.114447
    7  100.0    31.547699            3.812673
    8  100.0    30.067465            3.841753
    9  100.0    29.500589            3.609999



```python
assert np.allclose(stats["Total"], 100)
assert (stats["Total_Bases"] >= 10).all()
assert (stats["Total_Phase_Agents"] <= 5).all()
```
